# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-07-12 14:54
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('startupshot', '0002_auto_20150721_1556'),
        ('part', '0006_auto_20160618_1346'),
        ('employee', '0011_employees_issharedlm'),
    ]

    operations = [
        migrations.CreateModel(
            name='numericInspection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateCreated', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('isFullShot', models.BooleanField(default=True, verbose_name=b'Is Full Shot? (check if true)')),
                ('numVal_1', models.DecimalField(db_column=b'numVal_1', decimal_places=3, max_digits=12, verbose_name=b'Measurement')),
                ('inspectionResult', models.BooleanField(default=False, verbose_name=b'Inspection Result (check if passed)')),
                ('timeDelayNumVal', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True, verbose_name=b'Measurement after time')),
                ('headCavID', models.CharField(blank=True, max_length=8, null=True, verbose_name=b'Cavity Info')),
                ('Passed_Partial', models.BooleanField(default=False, verbose_name=b'Partial Passed?')),
                ('inspectorName', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ri_inspectorName', to='employee.Employees', verbose_name=b'Inspector Name')),
                ('jobID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ri_jobID', to='startupshot.startUpShot', verbose_name=b'Job ID')),
                ('machineOperator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ri_machineOperator', to='employee.Employees', verbose_name=b'Machine Operator')),
            ],
            options={
                'db_table': 'inspection_numericinspection',
                'verbose_name': 'Record - Numeric Inspection',
                'verbose_name_plural': 'Record - Numeric Inspections',
            },
        ),
        migrations.CreateModel(
            name='numericTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testName', models.CharField(max_length=75, unique=True, verbose_name=b'Range Test Name')),
                ('requireAll', models.BooleanField(default=False, verbose_name=b'Require all parts get inspection?')),
                ('calcAvg', models.BooleanField(default=False, verbose_name=b'Report raw data (do not take average)?')),
                ('isSystemInspection', models.BooleanField(default=False, verbose_name=b'System Inspection?')),
                ('hasTimeDelayInspection', models.BooleanField(default=False, verbose_name=b'Inspect Again After Time Period?')),
                ('IsCavity_Instanced', models.BooleanField(default=False, verbose_name=b'Is Cavity Instanced?')),
            ],
            options={
                'db_table': 'inspection_numerictest',
                'verbose_name': 'Name - Numeric Test',
                'verbose_name_plural': 'Name - Numeric Test',
            },
        ),
        migrations.CreateModel(
            name='numericTestByPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rangeMin', models.DecimalField(decimal_places=3, default=0, max_digits=12, verbose_name=b'Minimum Value')),
                ('rangeMax', models.DecimalField(decimal_places=3, default=9999999, max_digits=12, verbose_name=b'Maximum Value')),
                ('inspections_per_shift', models.IntegerField(default=2, verbose_name=b'Inspections Per Shift')),
                ('item_Number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='part.Part', verbose_name=b'Part Number')),
                ('testName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspection.numericTest', verbose_name=b'Range Test Name')),
            ],
            options={
                'db_table': 'inspection_numerictestbypart',
                'verbose_name': 'Part Assignment - Numeric Test Parameters',
                'verbose_name_plural': 'Part Assignment - Numeric Test Parameters',
            },
        ),
        migrations.CreateModel(
            name='passFailByPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspections_per_shift', models.IntegerField(default=2, verbose_name=b'Inspections Per Shift')),
                ('item_Number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='part.Part', verbose_name=b'Part Number')),
            ],
            options={
                'verbose_name': 'Part Assignment - Pass Fail Test',
                'verbose_name_plural': 'Part Assignment - Pass Fail Tests',
            },
        ),
        migrations.CreateModel(
            name='passFailInspection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateCreated', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('inspectionResult', models.BooleanField(default=True, verbose_name=b'Inspection Result (check if passed)')),
                ('headCavID', models.CharField(blank=True, max_length=8, null=True, verbose_name=b'Cavity Info')),
                ('Passed_Partial', models.BooleanField(default=False, verbose_name=b'Partial Passed?')),
                ('CavID', models.CharField(blank=True, default=b'-', max_length=8, null=True, verbose_name=b'Cavity ID')),
                ('CavGroupID', models.CharField(blank=True, default=b'-', max_length=8, null=True, verbose_name=b'Cavity Group')),
            ],
            options={
                'verbose_name': 'Record - Pass Fail Inspection',
                'verbose_name_plural': 'Record - Pass Fail Inspections',
            },
        ),
        migrations.CreateModel(
            name='passFailTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testName', models.CharField(max_length=75, unique=True, verbose_name=b'Pass Fail Test Name')),
                ('requireAll', models.BooleanField(default=False, verbose_name=b'Require all parts get inspection?')),
                ('isSystemInspection', models.BooleanField(default=False, verbose_name=b'System Inspection?')),
                ('IsCavity_Instanced', models.BooleanField(default=False, verbose_name=b'Is Cavity Instanced?')),
            ],
            options={
                'verbose_name': 'Name - Pass Fail Test',
                'verbose_name_plural': 'Name - Pass Fail Test',
            },
        ),
        migrations.CreateModel(
            name='passFailTestCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passFail', models.CharField(max_length=75, verbose_name=b'Pass Fail Reason')),
                ('testName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspection.passFailTest', verbose_name=b'Pass Fail Test Name')),
            ],
            options={
                'verbose_name': 'Criteria - Pass Fail Test',
                'verbose_name_plural': 'Criteria - Pass Fail Test',
            },
        ),
        migrations.CreateModel(
            name='RangeInspection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateCreated', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('isFullShot', models.BooleanField(default=True, verbose_name=b'Is Full Shot? (check if true)')),
                ('inspectionResult', models.BooleanField(default=False, verbose_name=b'Inspection Result (check if passed)')),
                ('numVal_1', models.DecimalField(db_column=b'numVal_1', decimal_places=3, max_digits=12, verbose_name=b'Low')),
                ('numVal_2', models.DecimalField(db_column=b'numVal_2', decimal_places=3, max_digits=12, verbose_name=b'High')),
                ('headCavID', models.CharField(blank=True, max_length=8, null=True, verbose_name=b'Cavity Info')),
                ('Passed_Partial', models.BooleanField(default=False, verbose_name=b'Partial Passed?')),
                ('inspectorName', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='float_inspectorName', to='employee.Employees', verbose_name=b'Inspector Name')),
                ('jobID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Float_jobID', to='startupshot.startUpShot', verbose_name=b'Job ID')),
                ('machineOperator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='float_machineOperator', to='employee.Employees', verbose_name=b'Machine Operator')),
            ],
            options={
                'db_table': 'inspection_rangeinspection',
                'verbose_name': 'Record - Range Inspection',
                'verbose_name_plural': 'Record - Range Inspections',
            },
        ),
        migrations.CreateModel(
            name='RangeRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testName', models.CharField(max_length=75, unique=True, verbose_name=b'Float Inspection Name')),
                ('requireAll', models.BooleanField(default=False, verbose_name=b'Require all parts get inspection?')),
                ('isSystemInspection', models.BooleanField(default=False, verbose_name=b'System Inspection?')),
                ('IsCavity_Instanced', models.BooleanField(default=False, verbose_name=b'Is Cavity Instanced?')),
            ],
            options={
                'db_table': 'inspection_rangerecord',
                'verbose_name': 'Name - Range Type Inspection',
                'verbose_name_plural': 'Name - Range Type Inspection',
            },
        ),
        migrations.CreateModel(
            name='RangeRecordByPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspections_per_shift', models.IntegerField(default=2, verbose_name=b'Inspections Per Shift')),
                ('rangeMin', models.DecimalField(decimal_places=3, default=0, max_digits=12, verbose_name=b'Minimum Value')),
                ('rangeMax', models.DecimalField(decimal_places=3, default=9999999, max_digits=12, verbose_name=b'Maximum Value')),
                ('item_Number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='part.Part', verbose_name=b'Part Number')),
                ('testName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspection.RangeRecord', verbose_name=b'Range Test Name')),
            ],
            options={
                'db_table': 'inspection_rangerecordbypart',
                'verbose_name': 'Part Assignment - Range Type Test',
                'verbose_name_plural': 'Part Assignment - Range Type Test',
            },
        ),
        migrations.CreateModel(
            name='textInspection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateCreated', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('isFullShot', models.BooleanField(default=True, verbose_name=b'Is Full Shot? (check if true)')),
                ('inspectionResult', models.CharField(max_length=75, verbose_name=b'Enter Inspection Information:')),
                ('headCavID', models.CharField(blank=True, max_length=8, null=True, verbose_name=b'Cavity Info')),
                ('Passed_Partial', models.BooleanField(default=False, verbose_name=b'Partial Passed?')),
                ('inspectorName', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ti_inspectorName', to='employee.Employees', verbose_name=b'Inspector Name')),
                ('jobID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ti_jobID', to='startupshot.startUpShot', verbose_name=b'Job ID')),
                ('machineOperator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ti_machineOperator', to='employee.Employees', verbose_name=b'Machine Operator')),
            ],
            options={
                'verbose_name': 'Record - Small Text Inspection',
                'verbose_name_plural': 'Record - Small Text Inspections',
            },
        ),
        migrations.CreateModel(
            name='textRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testName', models.CharField(max_length=75, unique=True, verbose_name=b'Text Box Inspection Name')),
                ('requireAll', models.BooleanField(default=False, verbose_name=b'Require all parts get inspection?')),
                ('isSystemInspection', models.BooleanField(default=False, verbose_name=b'System Inspection?')),
                ('IsCavity_Instanced', models.BooleanField(default=False, verbose_name=b'Is Cavity Instanced?')),
            ],
            options={
                'verbose_name': 'Name - Small Text type Inspection',
                'verbose_name_plural': 'Name - Small Text type Inspection',
            },
        ),
        migrations.CreateModel(
            name='textRecordByPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspections_per_shift', models.IntegerField(default=2, verbose_name=b'Inspections Per Shift')),
                ('item_Number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='part.Part', verbose_name=b'Part Number')),
                ('testName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspection.textRecord', verbose_name=b'Text Test Name')),
            ],
            options={
                'verbose_name': 'Part Assignment - Small Text Test',
                'verbose_name_plural': 'Part Assignment - Small Text Test',
            },
        ),
        migrations.AddField(
            model_name='textinspection',
            name='textTestName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspection.textRecord', verbose_name=b'Inspection Name'),
        ),
        migrations.AddField(
            model_name='rangeinspection',
            name='rangeTestName',
            field=models.ForeignKey(db_column=b'rangeTestName_id', on_delete=django.db.models.deletion.CASCADE, to='inspection.RangeRecord', verbose_name=b'Inspection Name'),
        ),
        migrations.AddField(
            model_name='passfailinspection',
            name='defectType',
            field=models.ManyToManyField(blank=True, to='inspection.passFailTestCriteria', verbose_name=b'Defect Type'),
        ),
        migrations.AddField(
            model_name='passfailinspection',
            name='inspectorName',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='pf_inspectorName', to='employee.Employees', verbose_name=b'Inspector Name'),
        ),
        migrations.AddField(
            model_name='passfailinspection',
            name='jobID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pf_jobID', to='startupshot.startUpShot', verbose_name=b'Job ID'),
        ),
        migrations.AddField(
            model_name='passfailinspection',
            name='machineOperator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pf_machineOperator', to='employee.Employees', verbose_name=b'Machine Operator'),
        ),
        migrations.AddField(
            model_name='passfailinspection',
            name='passFailTestName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspection.passFailTest', verbose_name=b'Inspection Name'),
        ),
        migrations.AddField(
            model_name='passfailbypart',
            name='testName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspection.passFailTest', verbose_name=b'Pass Fail Test Name'),
        ),
        migrations.AddField(
            model_name='numericinspection',
            name='numericTestName',
            field=models.ForeignKey(db_column=b'numericTestName_id', on_delete=django.db.models.deletion.CASCADE, to='inspection.numericTestByPart', verbose_name=b'Inspection Name'),
        ),
        migrations.AlterUniqueTogether(
            name='textrecordbypart',
            unique_together=set([('testName', 'item_Number')]),
        ),
        migrations.AlterUniqueTogether(
            name='rangerecordbypart',
            unique_together=set([('testName', 'item_Number')]),
        ),
        migrations.AlterUniqueTogether(
            name='passfailtestcriteria',
            unique_together=set([('testName', 'passFail')]),
        ),
        migrations.AlterUniqueTogether(
            name='passfailbypart',
            unique_together=set([('testName', 'item_Number')]),
        ),
        migrations.AlterUniqueTogether(
            name='numerictestbypart',
            unique_together=set([('testName', 'item_Number')]),
        ),
    ]
